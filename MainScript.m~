%%
% This script enables us to demonstrate: 1) the ensemble of models can reach the predetermined 
% steady-state fluxes with EM approach, 2) the control ensemble with parameters randomly sampled
% can not reach the predetermined steady-state, 3) the reduction of kinetic parameter space using 
% Principal Component Analysis (PCA), 4) how the ensemble of models that anchored to the same steady 
% state behave after perturbations.
% To run this script, four variables need to be declared in advance:
% A.	Data structure ‘Net’: ‘Net’ holds the general information of metabolic network of interest 
% such as stoichiometry, regulation information, thermodynamic properties, enzyme and metabolite names,
% biomass production and predetermined stead-state flux distributions. The detail instruction of constructing 
% ‘Net’ can be found in the Tutorial. An example of a simple toy model is used here. 
% B.	‘testInitialEnsemble’: if you want to demonstrate point 1) and 2) as mentioned above, assign testInitialEnsemble=1,
% else testInitialEnsemble=0. The default value is 1.
% C.	‘testPCA’: if you want to demonstrate point 3) together with 1) and 2), assign testPCA=1 inaddition to 
% testInitialEnsemble=1, else testPCA=0. The default value is 1.
% D.	‘perturbation’: in order to observe how the ensemble of models that anchored to the same steady behave after 
% introducing perturbations such as enzyme overexpression, assign perturbation=1 (testInitialEnsemble=0 and testPCA=0),
% else perturbation=0. The default value is 0. Please adjust the perturbation accordingly, an overexpression of enzyme 
% 1 by 2 fold is used as an example here.

%Yikun Tan 
%UCLA 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%DO NOT TOUCH ANY OF THE BELOW CODE UNTIL INDICATED
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear
tic %%%to measure run time
%% Input the information
load ss_fluxes14_1_3001
load Net15_7_8
%%%temporarily manually adding Spenz and Spsub 
load Spenz
load Spsub

%Choose option(s) to be tested
testInitialEnsemble=0;
testPCA=0;
perturbation=1;
%randomizes the initial guess generated by MATLAB
%(otherwise you'll end up w same random ##s)
rand('twister',sum(100*clock))
% Input the stoichiometric matrix along with required indices and fluxes
S=Net.S;
Sreg=Net.Sreg;
Sbm=Net.Sbm;
EnzName=Net.EnzName;
MetabName=Net.MetabName;
Vin_index=Net.Vin_index;
Vout_index=Net.Vout_index;
%index of the 1st cofactor for each cofactor pair
Vcof_index=Net.Vcof_index;
% Input the thermodynamic constraints
SGFEnergy=Net.SGFE;
MetabRange=Net.MetabRange;
% Rearrange reactions (reactions catalyzed by same enzyme can be
% recognized)
totalNetRxns=size(S,2); % # of columns in S
nin_=length(Vin_index); % # of import reactions
nout_=length(Vout_index); % # of import reactions
nInRxns=totalNetRxns-nin_-nout_; % # of metabolic reactions
%save met rxn names alphabetically in 'newOrder' and their original
%indices in 'ind_'.
[newOrder,ind_]=sort(EnzName(1:nInRxns));
%rearrange columns in S & Sreg based on 'ind_' so that they're based on
%alphabetical order
S(:,1:nInRxns)=S(:,ind_);
Sreg(:,1:nInRxns)=Sreg(:,ind_);
%rearrange 'EnzName' and 'SGFEnergy' based on alphabetical order
EnzName(1:nInRxns)=newOrder;
SGFEnergy(1:nInRxns)=SGFEnergy(ind_);
%save the (i) unique enz names, (ii) indices of the unique names in
%'EnzName', & (iii) indices of enz names in 'EnzName'.
[junk1,junk2,EnzID]=unique(EnzName(1:nInRxns));  %make sure no gap in EnzID
%make vector with indices for transport rxns
tmp=length(junk1)+1:1:length(junk1)+nin_+nout_;
%ammend transport rxn indices to 'EnzID' (which has indices for metabolic
%rxns).
EnzID=[EnzID;tmp'];
% Calculate the range of free energies if it is required
% r value (1.987) is in cal/mol*K
rt=1.987*298/1000;
SGFEnergy=SGFEnergy/rt;
negS=S;
posS=S;
posS(posS<0)=0; %only keep positive coefficients in S (products)
negS(negS>0)=0; %only keep negative coefficients in S (reactants)
%Determine lb/ub of rxn quotient based on metabolite concentrations
lnQ_low=negS'*log(MetabRange(:,2))+posS'*log(MetabRange(:,1));
lnQ_high=negS'*log(MetabRange(:,1))+posS'*log(MetabRange(:,2));
%Determine lb/ub of dG based on SGFE and lb/ub of rxn quotient
FreeE_low=SGFEnergy+lnQ_low;
FreeE_high=SGFEnergy+lnQ_high;
% Get the S and A matrices for EM model
[Asub,Aenz,Info_m]=getExpandedA(S,Sreg,Sbm,Vin_index,Vout_index,EnzID);
%%%temporarily manually adding Spenz and Spsub 
%%%[Spsub,Spenz]=getExpandedS(S,Sreg,Sbm,Vin_index,Vout_index,Info_m);
% Parameters relating to the size of the network
[nEnzComp_,nvuni]=size(Spenz);
nMetab_=size(Asub,2);
nPro_=size(Aenz,2);
nKvec=size(Aenz,1);
rVnet=Net.rVnet;
%rearrange 'rVnet' based on alphabetical order
rVnet(1:nInRxns,1)=Net.rVnet(ind_);
rVnet_bm=Net.rVnet_bm;
if exist('Net.realMetab','var')
    realMetab=Net.realMetab;
else
    realMetab=ones(nMetab_,1);
end
clear negS posS v lnQ* ind_ junk1 junk2 newOrder rt

% Calculate thermodynamic constraints
FElow_new=FreeE_low;
FEhigh_new=FreeE_high;
for k=1:nInRxns
    if FreeE_low(k)>0 && rVnet(k)>0
        fprintf('\nThe direction of the reaction %i is opposite to the thermo constraint',k);
    end
    if FreeE_low(k)<0 && FreeE_high(k)>0
        if rVnet(k)>0
            FEhigh_new(k)=0;
        else
            FElow_new(k)=0;
        end
    end
    if FreeE_high(k)<0 && rVnet(k)<0
        fprintf('\nThe direction of the reaction %i is opposite to the thermo constraint',k);
    end
end
%%
Sp=[Spsub;Spenz];
Ae_ode=[Asub,Aenz(:,1:nEnzComp_)];
initmetab_=realMetab; %Number of Metabolites
%clear Spsub Spenz FreeE_high FreeE_low MetabRange
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%DO NOT TOUCH ANY OF THE ABOVE CODE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%CHANGE THE CODE BELOW ACCORDING TO YOUR SYSTEM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Obtain an ensemble of models
nmodels=200;  %THIS IS THE NUMBER OF MODELS IN YOUR ENSEMBLE
fold = 1; % THIS IS THE FOLD CHANGE OF OVEREXPRESSION YOU WANT TO YOUR SYSTEM)
V_out=Vout_index; %THIS IS YOUR PRODUCT FLUX
V_in=Vin_index; %THIS IS YOUR GLUCOSE UPTAKE FLUX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Initial the saved variables
CuteVnet_p=zeros(3001,size(rVnet,1),nmodels);
CuteConc_p=zeros(3001,length(realMetab),nmodels);
CuteKvec=zeros(nKvec,nmodels);
Cutepro=zeros(nPro_,nmodels);
nReg=length(find(Info_m(:,7)==8));
nReg=nReg+2*length(find(Info_m(:,7)==6));
nReg=nReg+length(find(Info_m(:,7)==4|Info_m(:,7)==5));
Cutebinding_co=zeros(nReg,nmodels);
%Initialize variables for subsequent perturbations
CuteVnet_p2=zeros(3001,size(rVnet,1),nmodels);
CuteConc_p2=zeros(3001,length(realMetab),nmodels);
CuteVnet_p3=zeros(3001,size(rVnet,1),nmodels);
CuteConc_p3=zeros(3001,length(realMetab),nmodels);



%initialize variables to parameters of models that pass all filters
Cutebinding_co_passed = [];
ARS_passed = [];
CuteConc_p_passed = [];
CuteConc_p2_passed = [];
CuteConc_p3_passed = [];
CuteKvec_passed = [];
Cutepro_passed = [];
CuteVnet_p_passed = [];
CuteVnet_p2_passed = [];
CuteVnet_p3_passed = [];




%%%add another loop to only keep models that pass all filters
counter = 0;
while counter < 500
    counter = counter+1
    %%%initialize temporary filters that will be emptied after each loop
    CuteVnet_p_filt1 = [];
    CuteVnet_p_filt2 = [];
    CuteVnet_p2_filt1 = [];
    CuteVnet_p2_filt2 = [];
    CuteConc_p2_filt1 = [];
    CuteConc_p2_filt2 = [];
    CuteConc_p2_filt3 = [];
    CuteConc_p3_filt1 = [];
    CuteConc_p3_filt2 = [];
    CuteConc_p3_filt3 = [];
    CuteConc_p3_filt4 = [];
    CuteConc_p3_filt5 = [];
    CuteConc_p3_filt6 = [];
    CuteConc_p3_filt7 = [];
    CuteConc_p3_filt8 = [];
    CuteConc_p3_filt9 = [];
    CuteConc_p3_filt10 = [];
    CuteConc_p3_filt11 = [];
    CuteConc_p3_filt12 = [];
    CuteConc_p3_filt13 = [];
    CuteConc_p3_filt14 = [];
    CuteConc_p3_filt15 = [];
    CuteConc_p3_filt16 = [];
    CuteConc_p3_filt17 = [];
    CuteConc_p3_filt18 = [];
    CuteConc_p3_filt19 = [];

    %initialize variable that takes intersect of all filtered models
    CuteVnet_p_filt_all1 = [];
    CuteVnet_p_filt_all2 = [];
    CuteVnet_p_filt_all = [];
    
    %initialize variable that will save all ActRxnSplit values for all
    %models
    ARS = [];

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Obtain ODE models with EM approach
    initialMetab1=2*rand(nMetab_,1).*realMetab; %Random assign the initial condition to test the initial ensemble, if cofactors are involved, make sure that the cofactor pools are unchanged
    initialMetab2=realMetab;
    nmodel=0;
    while nmodel<nmodels
        Rref=samplingR(Info_m,FElow_new,FEhigh_new);
        NormMetab=ones(length(realMetab),1);
        [Kvec_raw,Econc,Tconc,rVuni,metab_,pro_,binding_co,ActRxnSplit]=getKineticPara_raw(rVnet,rVnet_bm,Info_m,Asub,Aenz,Rref,NormMetab,Sreg);
        realEconc=ones(length(rVnet),1);
        [Kvec,realPro_]=getKineticPara_abs(Info_m,Asub,Aenz,Kvec_raw,pro_,realMetab,realEconc);
        %changed maxtime from 150 to 750
        maxtime=3000;
        step=1;
        [vuni,vnet,conc,rate_,t,initial_,LHS_]=ElementaryRxnsODE_abs(Kvec,Econc,Tconc,realEconc,Sp,Ae_ode,Info_m,Vcof_index,initialMetab1,realPro_,maxtime,step);
        %set the threshold for the error between flux calculated through ode
        %(vnet) and measured vnet (rVnet)
        if max(abs(vnet(end,:)'-rVnet))<0.01 %changed from 0.1 to 0.01
            nmodel=nmodel+1
            CuteKvec(:,nmodel)=Kvec;
            Cutepro(:,nmodel)=realPro_;
            %if statement for first perturbation
            if perturbation
    %             Econc(1)=Econc(1)*5; %(e.g.overexpress enzyme 1 -STP- 5 fold)
                 Econc(12)=Econc(12)*0.1; %(e.g.underexpress enzyme 12 -orm_activation- 0.2 fold)
    %              Tconc(2)=Tconc(2)*0.5; %(e.g.underexpress trans rxn 2 -orm_in- 0.5 fold)
                [vuni,vnet,conc,rate_,t,initial_,LHS_]=ElementaryRxnsODE_abs(Kvec,Econc,Tconc,realEconc,Sp,Ae_ode,Info_m,Vcof_index,initialMetab2,realPro_,maxtime,step);
            end
            CuteVnet_p(:,:,nmodel)=vnet;
            %%%modify CuteVnet_p to account for total flux through activated rxns
    %         CuteVnet_p(:,8,nmodel)=(vuni(43,:)-vuni(44,:))+(vuni(293,:)-vuni(294,:));
    %         CuteVnet_p(:,9,nmodel)=(vuni(49,:)-vuni(50,:))+(vuni(301,:)-vuni(302,:));

            CuteConc_p(:,:,nmodel)=conc(:,1:length(realMetab));
            %%%return perturbed enzyme to reference state
            Econc(12)=Econc(12)*10;
            %%if statement for second perturbation
            if perturbation
    %             Econc(1)=Econc(1)*0.2; %(i.e.repress enzyme 1 -STP- 5 fold)
                 Econc(12)=Econc(12)*10; %(e.g.overexpress enzyme 12 -orm_activation- 5 fold)
    %              Tconc(2)=Tconc(2)*2; %(e.g.overexpress trans rxn 2 -orm_in- 2 fold)
                [vuni,vnet,conc,rate_,t,initial_,LHS_]=ElementaryRxnsODE_abs(Kvec,Econc,Tconc,realEconc,Sp,Ae_ode,Info_m,Vcof_index,initialMetab2,realPro_,maxtime,step);
            end
            CuteVnet_p2(:,:,nmodel)=vnet;
    %         %%%modify CuteVnet_p to account for total flux through activated rxns
    %         CuteVnet_p2(:,8,nmodel)=(vuni(43,:)-vuni(44,:))+(vuni(293,:)-vuni(294,:));
    %         CuteVnet_p2(:,9,nmodel)=(vuni(49,:)-vuni(50,:))+(vuni(301,:)-vuni(302,:));
    %        CuteVnet_p2(:,1,nmodel)=(vuni(1,:)-vuni(2,:))+(vuni(293,:)-vuni(294,:));

            CuteConc_p2(:,:,nmodel)=conc(:,1:length(realMetab));
            %%%return perturbed enzyme to reference state
            Econc(12)=Econc(12)*0.1;
            %%if statement for third perturbation
             if perturbation
                 Econc(5)=Econc(5)*2; %(i.e. OE enzyme 5 -LOH2-)
                [vuni,vnet,conc,rate_,t,initial_,LHS_]=ElementaryRxnsODE_abs(Kvec,Econc,Tconc,realEconc,Sp,Ae_ode,Info_m,Vcof_index,initialMetab2,realPro_,maxtime,step);
            end
            CuteVnet_p3(:,:,nmodel)=vnet;
            CuteConc_p3(:,:,nmodel)=conc(:,1:length(realMetab));
            %%%return perturbed enzyme to reference state
            Econc(5)=Econc(5)*0.5;
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            %This section is for automating the filtering process%%
            %Filtering the models that pass the first perturbation test
            %filter for CSI
            if (CuteVnet_p(maxtime,6,nmodel)/num(1,6) + CuteVnet_p(maxtime,7,nmodel))/num(1,7) > 2
                CuteVnet_p_filt1 = cat(1,CuteVnet_p_filt1,nmodel);
            end
            %filter for CSII
            if (CuteVnet_p(maxtime,8,nmodel)/num(1,8) + CuteVnet_p(maxtime,9,nmodel)/num(1,9)) < 2
                CuteVnet_p_filt2 = cat(1,CuteVnet_p_filt2,nmodel);
            end
            %filter for d180-1P
    %         if (CuteConc_p(maxtime,5,nmodel)) > 1
    %             CuteConc_p_filt1 = cat(1,CuteConc_p_filt1,nmodel);
    %         end
    %         %filter for t180-1P
    %         if (CuteConc_p(maxtime,6,nmodel)) > 1
    %             CuteConc_p_filt2 = cat(1,CuteConc_p_filt2,nmodel);
    %         end

            %Filtering the models that pass the second perturbation test
            %filter for CSI
            if (CuteVnet_p2(maxtime,6,nmodel)/num(1,6) + CuteVnet_p2(maxtime,7,nmodel)/num(1,7)) < 2
                CuteVnet_p2_filt1 = cat(1,CuteVnet_p2_filt1,nmodel);
            end
            %filter for CSII
            if (CuteVnet_p2(maxtime,8,nmodel)/num(1,8) + CuteVnet_p2(maxtime,9,nmodel)/num(1,9)) > 2
                CuteVnet_p2_filt2 = cat(1,CuteVnet_p2_filt2,nmodel);
            end
            %filter for t180
            if (CuteConc_p2(maxtime,4,nmodel)) < 1
                CuteConc_p2_filt1 = cat(1,CuteConc_p2_filt1,nmodel);
            end
            %filter for d181-hC16
            if (CuteConc_p2(maxtime,19,nmodel)) < 1
                CuteConc_p2_filt2 = cat(1,CuteConc_p2_filt2,nmodel);
            end
            %filter for d181-hC24
            if (CuteConc_p2(maxtime,21,nmodel)) > 1
                CuteConc_p2_filt3 = cat(1,CuteConc_p2_filt3,nmodel);
            end

            %Filtering the models that pass the third perturbation test
            %filter for d180-C16
            if (CuteConc_p3(maxtime,7,nmodel)) > 1
                CuteConc_p3_filt1 = cat(1,CuteConc_p3_filt1,nmodel);
            end
            %filter for t180-C16
            if (CuteConc_p3(maxtime,8,nmodel)) > 1
                CuteConc_p3_filt2 = cat(1,CuteConc_p3_filt2,nmodel);
            end
            %filter for d181-C16
            if (CuteConc_p3(maxtime,11,nmodel)) > 1
                CuteConc_p3_filt3 = cat(1,CuteConc_p3_filt3,nmodel);
            end
            %filter for t181-C16
            if (CuteConc_p3(maxtime,12,nmodel)) > 1
                CuteConc_p3_filt4 = cat(1,CuteConc_p3_filt4,nmodel);
            end
            %filter for d180-hC16
            if (CuteConc_p3(maxtime,15,nmodel)) > 1
                CuteConc_p3_filt5 = cat(1,CuteConc_p3_filt5,nmodel);
            end
            %filter for t180-hC16
            if (CuteConc_p3(maxtime,16,nmodel)) > 1
                CuteConc_p3_filt6 = cat(1,CuteConc_p3_filt6,nmodel);
            end
            %filter for d181-hC16
            if (CuteConc_p3(maxtime,19,nmodel)) > 1
                CuteConc_p3_filt7 = cat(1,CuteConc_p3_filt7,nmodel);
            end
            %filter for t181-hC16
            if (CuteConc_p3(maxtime,20,nmodel)) > 1
                CuteConc_p3_filt8 = cat(1,CuteConc_p3_filt8,nmodel);
            end
            %filter for Glc-d180-hC16
            if (CuteConc_p3(maxtime,23,nmodel)) > 1
                CuteConc_p3_filt9 = cat(1,CuteConc_p3_filt9,nmodel);
            end
            %filter for Glc-t180-hC16
            if (CuteConc_p3(maxtime,24,nmodel)) > 1
                CuteConc_p3_filt10 = cat(1,CuteConc_p3_filt10,nmodel);
            end
            %filter for Glc-d181-hC16
            if (CuteConc_p3(maxtime,27,nmodel)) > 1
                CuteConc_p3_filt11 = cat(1,CuteConc_p3_filt11,nmodel);
            end
            %filter for Glc-d181-hC24
            if (CuteConc_p3(maxtime,29,nmodel)) < 1
                CuteConc_p3_filt12 = cat(1,CuteConc_p3_filt12,nmodel);
            end
            %filter for Glc-t181-hC24
            if (CuteConc_p3(maxtime,30,nmodel)) < 1
                CuteConc_p3_filt13 = cat(1,CuteConc_p3_filt13,nmodel);
            end
            %filter for GIP-d180-hC16
            if (CuteConc_p3(maxtime,31,nmodel)) > 1
                CuteConc_p3_filt14 = cat(1,CuteConc_p3_filt14,nmodel);
            end
            %filter for GIP-t180-hC16
            if (CuteConc_p3(maxtime,32,nmodel)) > 1
                CuteConc_p3_filt15 = cat(1,CuteConc_p3_filt15,nmodel);
            end
            %filter for GIP-d181-hC16
            if (CuteConc_p3(maxtime,35,nmodel)) > 1
                CuteConc_p3_filt16 = cat(1,CuteConc_p3_filt16,nmodel);
            end
            %filter for GIP-t181-hC16
            if (CuteConc_p3(maxtime,36,nmodel)) > 1
                CuteConc_p3_filt17 = cat(1,CuteConc_p3_filt17,nmodel);
            end
            %filter for GIP-t181-hC24
            if (CuteConc_p3(maxtime,38,nmodel)) < 1
                CuteConc_p3_filt18 = cat(1,CuteConc_p3_filt18,nmodel);
            end
            %filter for d180
            if (CuteConc_p3(maxtime,3,nmodel)) > 1
                CuteConc_p3_filt19 = cat(1,CuteConc_p3_filt19,nmodel);
            end

            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            if ~isempty(binding_co)
                Cutebinding_co(:,nmodel)=binding_co(:,2);
            end
        end
        %take interesect of all filtered models
        CuteVnet_p_filt_all1 = intersect(intersect(intersect(CuteVnet_p_filt1,CuteVnet_p_filt2),CuteVnet_p2_filt1),CuteVnet_p2_filt2);
        CuteVnet_p_filt_all2 = intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(CuteConc_p3_filt1,CuteConc_p3_filt2),CuteConc_p3_filt3),CuteConc_p3_filt4),CuteConc_p3_filt5),CuteConc_p3_filt6),CuteConc_p3_filt7),CuteConc_p3_filt8),CuteConc_p3_filt9),CuteConc_p3_filt10),CuteConc_p3_filt11),CuteConc_p3_filt12),CuteConc_p3_filt13),CuteConc_p3_filt14),CuteConc_p3_filt15),CuteConc_p3_filt16),CuteConc_p3_filt17),CuteConc_p3_filt18),CuteConc_p3_filt19),CuteConc_p2_filt1),CuteConc_p2_filt2),CuteConc_p2_filt3);
        CuteVnet_p_filt_all = intersect(CuteVnet_p_filt_all1,CuteVnet_p_filt_all2);
        
        %%%save ActRxnSplit for each model
        %ARS = cat(2,ARS,ActRxnSplit(:,2));
    end
    
    %calculate # of passed models
    nopm = size(CuteVnet_p_filt_all,1);

    %%%check for passed model
    if nopm > 0
        %counter = counter+1
        %loop through passed models and save their parameters
        for k = 1:nopm
            model = CuteVnet_p_filt_all(k);
            Cutebinding_co_passed = cat(2,Cutebinding_co_passed,Cutebinding_co(:,model));
            ARS_passed = cat(2,ARS_passed,ARS(:,model));
            CuteConc_p_passed = cat(3,CuteConc_p_passed,CuteConc_p(:,:,model));
            CuteConc_p2_passed = cat(3,CuteConc_p2_passed,CuteConc_p2(:,:,model));
            CuteConc_p3_passed = cat(3,CuteConc_p3_passed,CuteConc_p3(:,:,model));
            CuteKvec_passed = cat(2,CuteKvec_passed,CuteKvec(:,model));
            Cutepro_passed = cat(2,Cutepro_passed,Cutepro(:,model));
            CuteVnet_p_passed = cat(3,CuteVnet_p_passed,CuteVnet_p(:,:,model));
            CuteVnet_p2_passed = cat(3,CuteVnet_p2_passed,CuteVnet_p2(:,:,model));
            CuteVnet_p3_passed = cat(3,CuteVnet_p3_passed,CuteVnet_p3(:,:,model));
        end
    end
end

exec_time = toc %%%measure run time